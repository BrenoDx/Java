
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import tela.model.ListaPaciente;
import tela.model.Paciente;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import static tela.model.ListaPaciente.listar;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author breno
 */
public class TelaInicial extends javax.swing.JFrame {

    /**
     * Creates new form TelaInicial
     */
    public TelaInicial() {
        initComponents();
        carregarArquivo("pacientes.txt");
        preencherTabela();  

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        Input = new javax.swing.JPanel();
        LbData = new javax.swing.JLabel();
        TxData = new javax.swing.JTextField();
        LbHora = new javax.swing.JLabel();
        TxHora = new javax.swing.JTextField();
        LbPS = new javax.swing.JLabel();
        TxPS = new javax.swing.JTextField();
        LbPD = new javax.swing.JLabel();
        TxPD = new javax.swing.JTextField();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        LbEstresse = new javax.swing.JLabel();
        BtEnviar = new javax.swing.JButton();
        Output = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        JMISair = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Input.setBorder(javax.swing.BorderFactory.createTitledBorder("Informação Paciente"));
        Input.setForeground(new java.awt.Color(0, 0, 0));
        Input.setToolTipText("Insira as informações nos campos");

        LbData.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        LbData.setLabelFor(TxData);
        LbData.setText("Data");

        TxData.setToolTipText("Informe a data no formato DD/MM/AAAA");
        TxData.setNextFocusableComponent(TxHora);

        LbHora.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        LbHora.setLabelFor(TxHora);
        LbHora.setText("Hora");

        TxHora.setToolTipText("Informe a hora no formato HH:MM");
        TxHora.setNextFocusableComponent(TxPS);

        LbPS.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        LbPS.setLabelFor(TxPS);
        LbPS.setText("Pressão Sistólica");

        TxPS.setToolTipText("Informe o valor da pressão sistólica ex: 80");
        TxPS.setNextFocusableComponent(TxPD);

        LbPD.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        LbPD.setLabelFor(TxPD);
        LbPD.setText("Pressão Diastólica");

        TxPD.setToolTipText("Informe o valor da pressão diastólica ex 80");
        TxPD.setNextFocusableComponent(jRadioButton1);

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Sim");
        jRadioButton1.setToolTipText("Selecione está opção se está sob estresse");
        jRadioButton1.setNextFocusableComponent(jRadioButton2);
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Não");
        jRadioButton2.setToolTipText("Selecione esta opção se não está sob estresse");
        jRadioButton2.setNextFocusableComponent(BtEnviar);

        LbEstresse.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        LbEstresse.setLabelFor(jRadioButton1);
        LbEstresse.setText("Situação de Estresse?");

        BtEnviar.setText("Salvar");
        BtEnviar.setToolTipText("Clique aqui para salvar os dados informados");
        BtEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtEnviarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout InputLayout = new javax.swing.GroupLayout(Input);
        Input.setLayout(InputLayout);
        InputLayout.setHorizontalGroup(
            InputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton2)
                    .addComponent(LbEstresse)
                    .addGroup(InputLayout.createSequentialGroup()
                        .addGroup(InputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(InputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(LbData)
                                .addComponent(LbHora)
                                .addComponent(TxHora, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                .addComponent(TxData))
                            .addComponent(jRadioButton1))
                        .addGap(88, 88, 88)
                        .addGroup(InputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LbPS)
                            .addComponent(TxPS, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LbPD)
                            .addComponent(TxPD, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(BtEnviar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        InputLayout.setVerticalGroup(
            InputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InputLayout.createSequentialGroup()
                .addGroup(InputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LbData)
                    .addComponent(LbPS))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TxData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TxPS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LbHora)
                    .addComponent(LbPD))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TxHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TxPD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(LbEstresse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton1)
                .addGap(6, 6, 6)
                .addComponent(jRadioButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(BtEnviar)
                .addGap(18, 18, 18))
        );

        TxData.getAccessibleContext().setAccessibleDescription("Campo para inserir a data no formato DD/MM/AAAA");
        TxHora.getAccessibleContext().setAccessibleDescription("Campo para inserir a hora no formato HH:MM");
        TxPS.getAccessibleContext().setAccessibleDescription("Campo para inserir a pressão sistólica ex 80");
        TxPD.getAccessibleContext().setAccessibleDescription("Campo para inserir a pressão diastólica ex 80");
        jRadioButton1.getAccessibleContext().setAccessibleDescription("Botão para indicar que está sob estresse");
        jRadioButton2.getAccessibleContext().setAccessibleDescription("Botão para indicar que não está sob estresse");
        BtEnviar.getAccessibleContext().setAccessibleDescription("Botão para salvar os dados preenchidos");

        javax.swing.GroupLayout OutputLayout = new javax.swing.GroupLayout(Output);
        Output.setLayout(OutputLayout);
        OutputLayout.setHorizontalGroup(
            OutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        OutputLayout.setVerticalGroup(
            OutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jMenu1.setText("File");

        JMISair.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_DOWN_MASK));
        JMISair.setText("Sair");
        JMISair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JMISairActionPerformed(evt);
            }
        });
        jMenu1.add(JMISair);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setText("Salvar");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Input, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 556, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Output, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Output, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        Input.getAccessibleContext().setAccessibleDescription("Parte de informações do paciente");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void BtEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtEnviarActionPerformed
        try{
         if(emptyFields()){
            return;
         }
         
        Paciente paciente = new Paciente();
        paciente.setData(TxData.getText());
        paciente.setHora(TxHora.getText());
        paciente.setPressaoS(Integer.parseInt(TxPS.getText()));
        paciente.setPressaoD(Integer.parseInt(TxPD.getText()));
        if(jRadioButton1.isSelected()){
            paciente.setSituacao("Sim");
        }else if(jRadioButton2.isSelected()){
             paciente.setSituacao("Não");
        }
            if(!paciente.validarData(paciente.getData())){
              JOptionPane.showMessageDialog(rootPane, "Digite o campo corretamente. dd/mm/aaaa");
            }else if(!paciente.validarHora(paciente.getHora())){
              JOptionPane.showMessageDialog(rootPane, "Digite o campo corretamente. hh:mm");
        }else{
            ListaPaciente.adicionar(paciente);
            salvarArquivo("pacientes.txt");
            preencherTabela();
            }
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(rootPane, "Informe numero corretamente sem casa decimal!");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(rootPane, "Erro ao salvar!");
        }
        
    }//GEN-LAST:event_BtEnviarActionPerformed

    private void JMISairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JMISairActionPerformed
        System.exit(0);
    }//GEN-LAST:event_JMISairActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        try {
            if(emptyFields() != true){
            salvarArquivo("pacientes.txt");
            preencherTabela();
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(rootPane, "Erro ao salvar!");
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaInicial().setVisible(true);
                carregarArquivo("pacientes.");
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtEnviar;
    private javax.swing.JPanel Input;
    private javax.swing.JMenuItem JMISair;
    private javax.swing.JLabel LbData;
    private javax.swing.JLabel LbEstresse;
    private javax.swing.JLabel LbHora;
    private javax.swing.JLabel LbPD;
    private javax.swing.JLabel LbPS;
    private javax.swing.JPanel Output;
    private javax.swing.JTextField TxData;
    private javax.swing.JTextField TxHora;
    private javax.swing.JTextField TxPD;
    private javax.swing.JTextField TxPS;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    public boolean emptyFields(){
        boolean empty = true;
        if(TxData.getText().isEmpty()){
            JOptionPane.showMessageDialog(rootPane, "Preencha o campo DATA!");
        }else if(TxHora.getText().isEmpty()){
            JOptionPane.showMessageDialog(rootPane, "Preencha o campo HORA!");
        }else if(TxPS.getText().isEmpty()){
            JOptionPane.showMessageDialog(rootPane, "Preencha o campo PRESSÃO SISTÓLICA!");
        }else if(TxPD.getText().isEmpty()){
            JOptionPane.showMessageDialog(rootPane, "Preencha o campo PRESSÃO DIASTÓLICA!");
        }else if(buttonGroup1.getSelection() == null){
            JOptionPane.showMessageDialog(rootPane, "Selecione o campo de ESTRESSE!");
        }else{
            empty = false;
        }
        return empty;
    }
    
    public void preencherTabela(){
        Object[] colunas = {"Data", "Hora", "Pressão Sistólica", "Pressão Diastólica", "Estresse"};
        DefaultTableModel tabela = new DefaultTableModel(colunas, 0);
        List<Paciente> listaCompleta = ListaPaciente.listar();
        
        for(int i = 0; i < listaCompleta.size(); i++){
            Paciente pacienteAtual = listaCompleta.get(i);
            Object[] linha = {
                pacienteAtual.getData(),
                pacienteAtual.getHora(),
                pacienteAtual.getPressaoS(),
                pacienteAtual.getPressaoD(),
                pacienteAtual.getSituacao()
        };
            tabela.addRow(linha);
        }
        jTable1.setModel(tabela);
    }
    
    public static void salvarArquivo(String caminho) throws IOException{
        try(BufferedWriter bw = new BufferedWriter(new FileWriter(caminho))){
          for(Paciente paciente : listar()){
              String linha = String.format("%s|%s|%d|%d|%s",
                      paciente.getData(),
                      paciente.getHora(),
                      paciente.getPressaoS(),
                      paciente.getPressaoD(),
                      paciente.getSituacao());
              bw.write(linha);
              bw.newLine();
          }  
          JOptionPane.showMessageDialog(null, "Dados salvos com sucesso!");
        }catch(IOException e){
            JOptionPane.showMessageDialog(null, "Erro ao salvar");
        }
    }
    
    public static void carregarArquivo(String caminho){
        try (BufferedReader br = new BufferedReader(new FileReader(caminho))) {
        String linha;
        while ((linha = br.readLine()) != null) {
            String[] dados = linha.split("\\|");
            if (dados.length == 5) {
                Paciente paciente = new Paciente();
                paciente.setData(dados[0]);
                paciente.setHora(dados[1]);
                paciente.setPressaoS(Integer.parseInt(dados[2]));
                paciente.setPressaoD(Integer.parseInt(dados[3]));
                paciente.setSituacao(dados[4]);
                ListaPaciente.adicionar(paciente); 
            }
        }
    } catch (IOException e) {
    } catch (NumberFormatException e) {
       
    }
    }

}
